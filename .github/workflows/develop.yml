name: Push to ECR

on:
  push:
    branches: [ "develop" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 690207726876.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: daycarat
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  build:
    name: CI
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Make application-secret.yml
        run: |
          mkdir -p ./src/main/resources
          if [ -f ./src/main/resources/application.yml ]; then
            rm ./src/main/resources/application.yml
          fi
          touch ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

        ## gradle build
      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    name: CD
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull image from Amazon ECR and restart container
        run: |
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker stop dc && docker rm dc
          docker run -d --name dc -p 8080:8080 --restart unless-stopped ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          sudo docker image prune -f
          
          
#
#      - name: Deploy to EC2
#        uses: appleboy/ssh-action@master
#        env:
#          IMAGE_URI: ${{ steps.build-image.outputs.image }}
#        with:
#          host: ${{ secrets.HOST }}
#          username: ec2-user
#          key: ${{ secrets.KEY }}
#          script: |
#            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#            aws configure set default.region ${{ env.AWS_REGION }}
#            aws configure set default.output json
#            aws ecr get-login-password --region ap-northeast-2
#            sudo docker login --username AWS --password-stdin 690207726876.dkr.ecr.ap-northeast-2.amazonaws.com
#            sudo docker rm -f $(sudo docker ps -qa)
#            sudo docker pull ${{ env.IMAGE_URI }}
#            sudo docker run -d -p 8080:8080 ${{ env.IMAGE_URI }}
#            sudo docker image prune -f
#
#
